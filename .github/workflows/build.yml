name: Build
on:
  workflow_dispatch: {}
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
        override: true
        target: x86_64-unknown-linux-gnu

    - name: Install dependencies
      run: |
        sudo apt-get install -y libpulse-dev

    - name: Build binary
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --release --target x86_64-unknown-linux-gnu

    - name: Strip binary
      run: strip "target/x86_64-unknown-linux-gnu/release/yablocks"

    - name: Build archive
      id: build_archive
      shell: bash
      run: |
        version="$(cargo metadata --format-version 1 | jq -r '[.packages[]|select(.name=="yablocks")][0].version')"
        mkdir archive
        cp LICENSE README.md archive/
        cd archive
        cp "../target/x86_64-unknown-linux-gnu/release/yablocks" ./
        name="yablocks-$version-86_64-unknown-linux-gnu.tar.gz"
        tar -czf "$name" LICENSE README.md yablocks
        echo "::set-output name=name::$name"

    - name: Upload archive
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.build_archive.outputs.name }}
        path: archive/${{ steps.build_archive.outputs.name }}

  make_deb:
    name: Make .deb
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
        override: true

    - name: Install dependencies
      run: |
        sudo apt-get install -y libpulse-dev

    - name: Build .deb
      id: deb
      run: |
        cargo install cargo-deb
        deb_file=$(cargo deb)
        echo "::set-output name=name::$(basename $deb_file)"

    - name: Upload .deb
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.deb.outputs.name }}
        path: target/debian/${{ steps.deb.outputs.name }}
